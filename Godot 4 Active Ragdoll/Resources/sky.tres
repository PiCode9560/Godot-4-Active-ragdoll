[gd_resource type="ShaderMaterial" load_steps=4 format=3 uid="uid://byhoa2glvt4rq"]

[sub_resource type="Shader" id="Shader_op0v4"]
code = "
// NOTE: Shader automatically converted from Godot Engine 4.2.2.stable's ProceduralSkyMaterial.

shader_type sky;
render_mode use_debanding;


uniform vec4 cloud_color : source_color = vec4(0.385, 0.454, 0.55, 1.0);
uniform float cloud_density : hint_range(0, 1) = 0.15;
uniform vec4 sky_top_color : source_color = vec4(0.385, 0.454, 0.55, 1.0);
uniform vec4 sky_horizon_color : source_color = vec4(0.646, 0.656, 0.67, 1.0);
uniform float sky_curve : hint_range(0, 1) = 0.15;
uniform float sky_energy = 1.0; // In Lux.
uniform sampler2D sky_cover : filter_linear, source_color, hint_default_black;
uniform vec4 sky_cover_modulate : source_color = vec4(1.0, 1.0, 1.0, 1.0);
uniform vec4 ground_bottom_color : source_color = vec4(0.2, 0.169, 0.133, 1.0);
uniform vec4 ground_horizon_color : source_color = vec4(0.646, 0.656, 0.67, 1.0);
uniform float ground_curve : hint_range(0, 1) = 0.02;
uniform float ground_energy = 1.0;
uniform float sun_angle_max = 30.0;
uniform float sun_curve : hint_range(0, 1) = 0.15;
uniform sampler2D cloud_noise;

//vec2 polar(vec2 coord){
	//float r = length(coord);
	//float a = atan(coord.y/coord.x);
	//return vec2(r,a);
//}
void sky() {
	float v_angle = acos(clamp(EYEDIR.y, -1.0, 1.0));
	float c = (1.0 - v_angle / (PI * 0.5));
	vec3 sky = mix(sky_horizon_color.rgb, sky_top_color.rgb, clamp(1.0 - pow(1.0 - c, 1.0 / sky_curve), 0.0, 1.0));
	sky *= sky_energy;

	if (LIGHT0_ENABLED) {
		float sun_angle = acos(dot(LIGHT0_DIRECTION, EYEDIR));
		if (sun_angle < LIGHT0_SIZE) {
			sky = LIGHT0_COLOR * LIGHT0_ENERGY;
		} else if (sun_angle < sun_angle_max) {
			float c2 = (sun_angle - LIGHT0_SIZE) / (sun_angle_max - LIGHT0_SIZE);
			sky = mix(LIGHT0_COLOR * LIGHT0_ENERGY, sky, clamp(1.0 - pow(1.0 - c2, 1.0 / sun_curve), 0.0, 1.0));
		}
	}

	if (LIGHT1_ENABLED) {
		float sun_angle = acos(dot(LIGHT1_DIRECTION, EYEDIR));
		if (sun_angle < LIGHT1_SIZE) {
			sky = LIGHT1_COLOR * LIGHT1_ENERGY;
		} else if (sun_angle < sun_angle_max) {
			float c2 = (sun_angle - LIGHT1_SIZE) / (sun_angle_max - LIGHT1_SIZE);
			sky = mix(LIGHT1_COLOR * LIGHT1_ENERGY, sky, clamp(1.0 - pow(1.0 - c2, 1.0 / sun_curve), 0.0, 1.0));
		}
	}

	if (LIGHT2_ENABLED) {
		float sun_angle = acos(dot(LIGHT2_DIRECTION, EYEDIR));
		if (sun_angle < LIGHT2_SIZE) {
			sky = LIGHT2_COLOR * LIGHT2_ENERGY;
		} else if (sun_angle < sun_angle_max) {
			float c2 = (sun_angle - LIGHT2_SIZE) / (sun_angle_max - LIGHT2_SIZE);
			sky = mix(LIGHT2_COLOR * LIGHT2_ENERGY, sky, clamp(1.0 - pow(1.0 - c2, 1.0 / sun_curve), 0.0, 1.0));
		}
	}

	if (LIGHT3_ENABLED) {
		float sun_angle = acos(dot(LIGHT3_DIRECTION, EYEDIR));
		if (sun_angle < LIGHT3_SIZE) {
			sky = LIGHT3_COLOR * LIGHT3_ENERGY;
		} else if (sun_angle < sun_angle_max) {
			float c2 = (sun_angle - LIGHT3_SIZE) / (sun_angle_max - LIGHT3_SIZE);
			sky = mix(LIGHT3_COLOR * LIGHT3_ENERGY, sky, clamp(1.0 - pow(1.0 - c2, 1.0 / sun_curve), 0.0, 1.0));
		}
	}
	
	float cloud_noise_offset = mod(SKY_COORDS.x+(texture(cloud_noise, vec2(0,SKY_COORDS.y)).r)*pow(1.0-SKY_COORDS.y, 2.)/(1.-SKY_COORDS.y*2.),1.0);//(pow(1.0-SKY_COORDS.y,2.0));
	//vec4 cloud_noise_texture = (texture(cloud_noise, vec2(cloud_noise_offset,pow(1.0-SKY_COORDS.y, test/2.0)))+1.0)/2.0;
	vec4 cloud_noise_texture = texture(cloud_noise, vec2(cloud_noise_offset,SKY_COORDS.y/(1.-SKY_COORDS.y*2.)/2.));
	vec4 sky_cover_texture = texture(sky_cover, SKY_COORDS);
	
	sky += (sky_cover_texture.rgb * sky_cover_modulate.rgb) * sky_cover_texture.a * sky_cover_modulate.a * sky_energy;
	if(cloud_noise_texture.r < cloud_density){
		sky = mix(sky, cloud_color.rgb, cloud_color.a);
	}
	//}else:
	//sky = (sky, cloud_color.rgb, cloud_noise_texture.rgb);
	c = (v_angle - (PI * 0.5)) / (PI * 0.5);
	vec3 ground = mix(ground_horizon_color.rgb, ground_bottom_color.rgb, clamp(1.0 - pow(1.0 - c, 1.0 / ground_curve), 0.0, 1.0));
	ground *= ground_energy;

	COLOR = mix(ground, sky, step(0.0, EYEDIR.y));
	//COLOR = cloud_noise_texture.rgb;//
}
"

[sub_resource type="FastNoiseLite" id="FastNoiseLite_3imlq"]
noise_type = 2
seed = 10
frequency = 0.0064

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_lv2kq"]
noise = SubResource("FastNoiseLite_3imlq")

[resource]
shader = SubResource("Shader_op0v4")
shader_parameter/cloud_color = Color(1, 1, 1, 0.156863)
shader_parameter/cloud_density = 0.302
shader_parameter/sky_top_color = Color(0.354172, 0.451441, 0.611318, 1)
shader_parameter/sky_horizon_color = Color(0.645114, 0.650718, 0.706628, 1)
shader_parameter/sky_curve = 0.15
shader_parameter/sky_energy = 1.0
shader_parameter/sky_cover_modulate = Color(1, 1, 1, 1)
shader_parameter/ground_bottom_color = Color(0.2, 0.169, 0.133, 1)
shader_parameter/ground_horizon_color = Color(0.646, 0.656, 0.67, 1)
shader_parameter/ground_curve = 0.02
shader_parameter/ground_energy = 1.0
shader_parameter/sun_angle_max = 0.523599
shader_parameter/sun_curve = 0.15
shader_parameter/cloud_noise = SubResource("NoiseTexture2D_lv2kq")
